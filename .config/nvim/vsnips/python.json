{
    "New class": {
        "prefix": "class",
        "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
        "description" : "Code snippet for a class definition."
    },
    "New method": {
        "prefix": "defs",
        "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for a class method definition."
    },
    "New function": {
        "prefix": "def",
        "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for function definition."
    },
    "PyTorchImports": {
        "prefix": ["torchlibs"],
        "body": [
            "import torch",
            "import torch.nn as nn",
            "import torch.nn.functional as F",
            "import torch.optim as optim"
        ],
        "description": "Common pytorch imports"
    },
    "ipdb": {
        "prefix": "ipdb",
        "body": "import ipdb; ipdb.set_trace()",
        "description": "Code snippet for ipdb debug"
    },
    "pdb": {
        "prefix": "pdb",
        "body": "import pdb; pdb.set_trace()",
        "description": "Code snippet for pdb debug"
    },
    "try/except": {
        "prefix": "try/except",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}"
        ],
        "description": "Code snippet for a try/except statement"
    },
    "try/finally": {
        "prefix": "try/finally",
        "body": ["try:", "\t${1:pass}", "finally:", "\t${2:pass}"],
        "description": "Code snippet for a try/finally statement"
    },
    "try/except/else": {
        "prefix": "try/except/else",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "else:",
            "\t${5:pass}"
        ],
        "description": "Code snippet for a try/except/else statement"
    },
    "try/except/finally": {
        "prefix": "try/except/finally",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "finally:",
            "\t${5:pass}"
        ],
        "description": "Code snippet for a try/except/finally statement"
    },
    "try/except/else/finally": {
        "prefix": "try/except/else/finally",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "else:",
            "\t${5:pass}",
            "finally:",
            "\t${6:pass}"
        ],
        "description": "Code snippet for a try/except/else/finally statement"
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
        "description" : "Create implicitly all the code at the top level using the __name__ special variable."
    }
}
